/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package serialization.compare.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CardState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7432087032221176630L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CardState\",\"namespace\":\"serialization.compare.avro\",\"fields\":[{\"name\":\"card\",\"type\":{\"type\":\"record\",\"name\":\"Card\",\"fields\":[{\"name\":\"suit\",\"type\":{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADES\",\"DIAMONDS\",\"HEARTS\",\"CLUBS\"]}},{\"name\":\"rank\",\"type\":{\"type\":\"enum\",\"name\":\"Rank\",\"symbols\":[\"ACE\",\"TWO\",\"THREE\",\"FOUR\",\"FIVE\",\"SIX\",\"SEVEN\",\"EIGHT\",\"NINE\",\"TEN\",\"JACK\",\"QUEEN\",\"KING\"]}}]}},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"State\",\"symbols\":[\"UP\",\"DOWN\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CardState> ENCODER =
      new BinaryMessageEncoder<CardState>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CardState> DECODER =
      new BinaryMessageDecoder<CardState>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CardState> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CardState> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CardState> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CardState>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CardState to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CardState from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CardState instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CardState fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public serialization.compare.avro.Card card;
  @Deprecated public serialization.compare.avro.State state;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CardState() {}

  /**
   * All-args constructor.
   * @param card The new value for card
   * @param state The new value for state
   */
  public CardState(serialization.compare.avro.Card card, serialization.compare.avro.State state) {
    this.card = card;
    this.state = state;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return card;
    case 1: return state;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: card = (serialization.compare.avro.Card)value$; break;
    case 1: state = (serialization.compare.avro.State)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'card' field.
   * @return The value of the 'card' field.
   */
  public serialization.compare.avro.Card getCard() {
    return card;
  }


  /**
   * Sets the value of the 'card' field.
   * @param value the value to set.
   */
  public void setCard(serialization.compare.avro.Card value) {
    this.card = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public serialization.compare.avro.State getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(serialization.compare.avro.State value) {
    this.state = value;
  }

  /**
   * Creates a new CardState RecordBuilder.
   * @return A new CardState RecordBuilder
   */
  public static serialization.compare.avro.CardState.Builder newBuilder() {
    return new serialization.compare.avro.CardState.Builder();
  }

  /**
   * Creates a new CardState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CardState RecordBuilder
   */
  public static serialization.compare.avro.CardState.Builder newBuilder(serialization.compare.avro.CardState.Builder other) {
    if (other == null) {
      return new serialization.compare.avro.CardState.Builder();
    } else {
      return new serialization.compare.avro.CardState.Builder(other);
    }
  }

  /**
   * Creates a new CardState RecordBuilder by copying an existing CardState instance.
   * @param other The existing instance to copy.
   * @return A new CardState RecordBuilder
   */
  public static serialization.compare.avro.CardState.Builder newBuilder(serialization.compare.avro.CardState other) {
    if (other == null) {
      return new serialization.compare.avro.CardState.Builder();
    } else {
      return new serialization.compare.avro.CardState.Builder(other);
    }
  }

  /**
   * RecordBuilder for CardState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CardState>
    implements org.apache.avro.data.RecordBuilder<CardState> {

    private serialization.compare.avro.Card card;
    private serialization.compare.avro.Card.Builder cardBuilder;
    private serialization.compare.avro.State state;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(serialization.compare.avro.CardState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.card)) {
        this.card = data().deepCopy(fields()[0].schema(), other.card);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCardBuilder()) {
        this.cardBuilder = serialization.compare.avro.Card.newBuilder(other.getCardBuilder());
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing CardState instance
     * @param other The existing instance to copy.
     */
    private Builder(serialization.compare.avro.CardState other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.card)) {
        this.card = data().deepCopy(fields()[0].schema(), other.card);
        fieldSetFlags()[0] = true;
      }
      this.cardBuilder = null;
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'card' field.
      * @return The value.
      */
    public serialization.compare.avro.Card getCard() {
      return card;
    }


    /**
      * Sets the value of the 'card' field.
      * @param value The value of 'card'.
      * @return This builder.
      */
    public serialization.compare.avro.CardState.Builder setCard(serialization.compare.avro.Card value) {
      validate(fields()[0], value);
      this.cardBuilder = null;
      this.card = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'card' field has been set.
      * @return True if the 'card' field has been set, false otherwise.
      */
    public boolean hasCard() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'card' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public serialization.compare.avro.Card.Builder getCardBuilder() {
      if (cardBuilder == null) {
        if (hasCard()) {
          setCardBuilder(serialization.compare.avro.Card.newBuilder(card));
        } else {
          setCardBuilder(serialization.compare.avro.Card.newBuilder());
        }
      }
      return cardBuilder;
    }

    /**
     * Sets the Builder instance for the 'card' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public serialization.compare.avro.CardState.Builder setCardBuilder(serialization.compare.avro.Card.Builder value) {
      clearCard();
      cardBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'card' field has an active Builder instance
     * @return True if the 'card' field has an active Builder instance
     */
    public boolean hasCardBuilder() {
      return cardBuilder != null;
    }

    /**
      * Clears the value of the 'card' field.
      * @return This builder.
      */
    public serialization.compare.avro.CardState.Builder clearCard() {
      card = null;
      cardBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public serialization.compare.avro.State getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public serialization.compare.avro.CardState.Builder setState(serialization.compare.avro.State value) {
      validate(fields()[1], value);
      this.state = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public serialization.compare.avro.CardState.Builder clearState() {
      state = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CardState build() {
      try {
        CardState record = new CardState();
        if (cardBuilder != null) {
          try {
            record.card = this.cardBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("card"));
            throw e;
          }
        } else {
          record.card = fieldSetFlags()[0] ? this.card : (serialization.compare.avro.Card) defaultValue(fields()[0]);
        }
        record.state = fieldSetFlags()[1] ? this.state : (serialization.compare.avro.State) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CardState>
    WRITER$ = (org.apache.avro.io.DatumWriter<CardState>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CardState>
    READER$ = (org.apache.avro.io.DatumReader<CardState>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.card.customEncode(out);

    out.writeEnum(this.state.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.card == null) {
        this.card = new serialization.compare.avro.Card();
      }
      this.card.customDecode(in);

      this.state = serialization.compare.avro.State.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.card == null) {
            this.card = new serialization.compare.avro.Card();
          }
          this.card.customDecode(in);
          break;

        case 1:
          this.state = serialization.compare.avro.State.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










