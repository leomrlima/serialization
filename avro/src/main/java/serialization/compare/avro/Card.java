/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package serialization.compare.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Card extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7531978686963622625L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Card\",\"namespace\":\"serialization.compare.avro\",\"fields\":[{\"name\":\"suit\",\"type\":{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADES\",\"DIAMONDS\",\"HEARTS\",\"CLUBS\"]}},{\"name\":\"rank\",\"type\":{\"type\":\"enum\",\"name\":\"Rank\",\"symbols\":[\"ACE\",\"TWO\",\"THREE\",\"FOUR\",\"FIVE\",\"SIX\",\"SEVEN\",\"EIGHT\",\"NINE\",\"TEN\",\"JACK\",\"QUEEN\",\"KING\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Card> ENCODER =
      new BinaryMessageEncoder<Card>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Card> DECODER =
      new BinaryMessageDecoder<Card>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Card> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Card> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Card> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Card>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Card to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Card from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Card instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Card fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public serialization.compare.avro.Suit suit;
  @Deprecated public serialization.compare.avro.Rank rank;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Card() {}

  /**
   * All-args constructor.
   * @param suit The new value for suit
   * @param rank The new value for rank
   */
  public Card(serialization.compare.avro.Suit suit, serialization.compare.avro.Rank rank) {
    this.suit = suit;
    this.rank = rank;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return suit;
    case 1: return rank;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: suit = (serialization.compare.avro.Suit)value$; break;
    case 1: rank = (serialization.compare.avro.Rank)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'suit' field.
   * @return The value of the 'suit' field.
   */
  public serialization.compare.avro.Suit getSuit() {
    return suit;
  }


  /**
   * Sets the value of the 'suit' field.
   * @param value the value to set.
   */
  public void setSuit(serialization.compare.avro.Suit value) {
    this.suit = value;
  }

  /**
   * Gets the value of the 'rank' field.
   * @return The value of the 'rank' field.
   */
  public serialization.compare.avro.Rank getRank() {
    return rank;
  }


  /**
   * Sets the value of the 'rank' field.
   * @param value the value to set.
   */
  public void setRank(serialization.compare.avro.Rank value) {
    this.rank = value;
  }

  /**
   * Creates a new Card RecordBuilder.
   * @return A new Card RecordBuilder
   */
  public static serialization.compare.avro.Card.Builder newBuilder() {
    return new serialization.compare.avro.Card.Builder();
  }

  /**
   * Creates a new Card RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Card RecordBuilder
   */
  public static serialization.compare.avro.Card.Builder newBuilder(serialization.compare.avro.Card.Builder other) {
    if (other == null) {
      return new serialization.compare.avro.Card.Builder();
    } else {
      return new serialization.compare.avro.Card.Builder(other);
    }
  }

  /**
   * Creates a new Card RecordBuilder by copying an existing Card instance.
   * @param other The existing instance to copy.
   * @return A new Card RecordBuilder
   */
  public static serialization.compare.avro.Card.Builder newBuilder(serialization.compare.avro.Card other) {
    if (other == null) {
      return new serialization.compare.avro.Card.Builder();
    } else {
      return new serialization.compare.avro.Card.Builder(other);
    }
  }

  /**
   * RecordBuilder for Card instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Card>
    implements org.apache.avro.data.RecordBuilder<Card> {

    private serialization.compare.avro.Suit suit;
    private serialization.compare.avro.Rank rank;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(serialization.compare.avro.Card.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.suit)) {
        this.suit = data().deepCopy(fields()[0].schema(), other.suit);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.rank)) {
        this.rank = data().deepCopy(fields()[1].schema(), other.rank);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Card instance
     * @param other The existing instance to copy.
     */
    private Builder(serialization.compare.avro.Card other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.suit)) {
        this.suit = data().deepCopy(fields()[0].schema(), other.suit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rank)) {
        this.rank = data().deepCopy(fields()[1].schema(), other.rank);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'suit' field.
      * @return The value.
      */
    public serialization.compare.avro.Suit getSuit() {
      return suit;
    }


    /**
      * Sets the value of the 'suit' field.
      * @param value The value of 'suit'.
      * @return This builder.
      */
    public serialization.compare.avro.Card.Builder setSuit(serialization.compare.avro.Suit value) {
      validate(fields()[0], value);
      this.suit = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'suit' field has been set.
      * @return True if the 'suit' field has been set, false otherwise.
      */
    public boolean hasSuit() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'suit' field.
      * @return This builder.
      */
    public serialization.compare.avro.Card.Builder clearSuit() {
      suit = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rank' field.
      * @return The value.
      */
    public serialization.compare.avro.Rank getRank() {
      return rank;
    }


    /**
      * Sets the value of the 'rank' field.
      * @param value The value of 'rank'.
      * @return This builder.
      */
    public serialization.compare.avro.Card.Builder setRank(serialization.compare.avro.Rank value) {
      validate(fields()[1], value);
      this.rank = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'rank' field has been set.
      * @return True if the 'rank' field has been set, false otherwise.
      */
    public boolean hasRank() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'rank' field.
      * @return This builder.
      */
    public serialization.compare.avro.Card.Builder clearRank() {
      rank = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Card build() {
      try {
        Card record = new Card();
        record.suit = fieldSetFlags()[0] ? this.suit : (serialization.compare.avro.Suit) defaultValue(fields()[0]);
        record.rank = fieldSetFlags()[1] ? this.rank : (serialization.compare.avro.Rank) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Card>
    WRITER$ = (org.apache.avro.io.DatumWriter<Card>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Card>
    READER$ = (org.apache.avro.io.DatumReader<Card>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.suit.ordinal());

    out.writeEnum(this.rank.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.suit = serialization.compare.avro.Suit.values()[in.readEnum()];

      this.rank = serialization.compare.avro.Rank.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.suit = serialization.compare.avro.Suit.values()[in.readEnum()];
          break;

        case 1:
          this.rank = serialization.compare.avro.Rank.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










