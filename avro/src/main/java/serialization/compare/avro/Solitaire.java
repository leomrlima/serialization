/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package serialization.compare.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Solitaire extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6921098492014672562L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Solitaire\",\"namespace\":\"serialization.compare.avro\",\"fields\":[{\"name\":\"tableauPiles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Pile\",\"fields\":[{\"name\":\"cards\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CardState\",\"fields\":[{\"name\":\"card\",\"type\":{\"type\":\"record\",\"name\":\"Card\",\"fields\":[{\"name\":\"suit\",\"type\":{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADES\",\"DIAMONDS\",\"HEARTS\",\"CLUBS\"]}},{\"name\":\"rank\",\"type\":{\"type\":\"enum\",\"name\":\"Rank\",\"symbols\":[\"ACE\",\"TWO\",\"THREE\",\"FOUR\",\"FIVE\",\"SIX\",\"SEVEN\",\"EIGHT\",\"NINE\",\"TEN\",\"JACK\",\"QUEEN\",\"KING\"]}}]}},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"State\",\"symbols\":[\"UP\",\"DOWN\"]}}]}}}]}}},{\"name\":\"foundationPiles\",\"type\":{\"type\":\"map\",\"values\":\"Pile\"}},{\"name\":\"handPile\",\"type\":\"Pile\"},{\"name\":\"wastePile\",\"type\":\"Pile\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Solitaire> ENCODER =
      new BinaryMessageEncoder<Solitaire>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Solitaire> DECODER =
      new BinaryMessageDecoder<Solitaire>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Solitaire> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Solitaire> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Solitaire> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Solitaire>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Solitaire to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Solitaire from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Solitaire instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Solitaire fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<serialization.compare.avro.Pile> tableauPiles;
  @Deprecated public java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> foundationPiles;
  @Deprecated public serialization.compare.avro.Pile handPile;
  @Deprecated public serialization.compare.avro.Pile wastePile;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Solitaire() {}

  /**
   * All-args constructor.
   * @param tableauPiles The new value for tableauPiles
   * @param foundationPiles The new value for foundationPiles
   * @param handPile The new value for handPile
   * @param wastePile The new value for wastePile
   */
  public Solitaire(java.util.List<serialization.compare.avro.Pile> tableauPiles, java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> foundationPiles, serialization.compare.avro.Pile handPile, serialization.compare.avro.Pile wastePile) {
    this.tableauPiles = tableauPiles;
    this.foundationPiles = foundationPiles;
    this.handPile = handPile;
    this.wastePile = wastePile;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tableauPiles;
    case 1: return foundationPiles;
    case 2: return handPile;
    case 3: return wastePile;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tableauPiles = (java.util.List<serialization.compare.avro.Pile>)value$; break;
    case 1: foundationPiles = (java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile>)value$; break;
    case 2: handPile = (serialization.compare.avro.Pile)value$; break;
    case 3: wastePile = (serialization.compare.avro.Pile)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tableauPiles' field.
   * @return The value of the 'tableauPiles' field.
   */
  public java.util.List<serialization.compare.avro.Pile> getTableauPiles() {
    return tableauPiles;
  }


  /**
   * Sets the value of the 'tableauPiles' field.
   * @param value the value to set.
   */
  public void setTableauPiles(java.util.List<serialization.compare.avro.Pile> value) {
    this.tableauPiles = value;
  }

  /**
   * Gets the value of the 'foundationPiles' field.
   * @return The value of the 'foundationPiles' field.
   */
  public java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> getFoundationPiles() {
    return foundationPiles;
  }


  /**
   * Sets the value of the 'foundationPiles' field.
   * @param value the value to set.
   */
  public void setFoundationPiles(java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> value) {
    this.foundationPiles = value;
  }

  /**
   * Gets the value of the 'handPile' field.
   * @return The value of the 'handPile' field.
   */
  public serialization.compare.avro.Pile getHandPile() {
    return handPile;
  }


  /**
   * Sets the value of the 'handPile' field.
   * @param value the value to set.
   */
  public void setHandPile(serialization.compare.avro.Pile value) {
    this.handPile = value;
  }

  /**
   * Gets the value of the 'wastePile' field.
   * @return The value of the 'wastePile' field.
   */
  public serialization.compare.avro.Pile getWastePile() {
    return wastePile;
  }


  /**
   * Sets the value of the 'wastePile' field.
   * @param value the value to set.
   */
  public void setWastePile(serialization.compare.avro.Pile value) {
    this.wastePile = value;
  }

  /**
   * Creates a new Solitaire RecordBuilder.
   * @return A new Solitaire RecordBuilder
   */
  public static serialization.compare.avro.Solitaire.Builder newBuilder() {
    return new serialization.compare.avro.Solitaire.Builder();
  }

  /**
   * Creates a new Solitaire RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Solitaire RecordBuilder
   */
  public static serialization.compare.avro.Solitaire.Builder newBuilder(serialization.compare.avro.Solitaire.Builder other) {
    if (other == null) {
      return new serialization.compare.avro.Solitaire.Builder();
    } else {
      return new serialization.compare.avro.Solitaire.Builder(other);
    }
  }

  /**
   * Creates a new Solitaire RecordBuilder by copying an existing Solitaire instance.
   * @param other The existing instance to copy.
   * @return A new Solitaire RecordBuilder
   */
  public static serialization.compare.avro.Solitaire.Builder newBuilder(serialization.compare.avro.Solitaire other) {
    if (other == null) {
      return new serialization.compare.avro.Solitaire.Builder();
    } else {
      return new serialization.compare.avro.Solitaire.Builder(other);
    }
  }

  /**
   * RecordBuilder for Solitaire instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Solitaire>
    implements org.apache.avro.data.RecordBuilder<Solitaire> {

    private java.util.List<serialization.compare.avro.Pile> tableauPiles;
    private java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> foundationPiles;
    private serialization.compare.avro.Pile handPile;
    private serialization.compare.avro.Pile.Builder handPileBuilder;
    private serialization.compare.avro.Pile wastePile;
    private serialization.compare.avro.Pile.Builder wastePileBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(serialization.compare.avro.Solitaire.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tableauPiles)) {
        this.tableauPiles = data().deepCopy(fields()[0].schema(), other.tableauPiles);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.foundationPiles)) {
        this.foundationPiles = data().deepCopy(fields()[1].schema(), other.foundationPiles);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.handPile)) {
        this.handPile = data().deepCopy(fields()[2].schema(), other.handPile);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasHandPileBuilder()) {
        this.handPileBuilder = serialization.compare.avro.Pile.newBuilder(other.getHandPileBuilder());
      }
      if (isValidValue(fields()[3], other.wastePile)) {
        this.wastePile = data().deepCopy(fields()[3].schema(), other.wastePile);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasWastePileBuilder()) {
        this.wastePileBuilder = serialization.compare.avro.Pile.newBuilder(other.getWastePileBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Solitaire instance
     * @param other The existing instance to copy.
     */
    private Builder(serialization.compare.avro.Solitaire other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.tableauPiles)) {
        this.tableauPiles = data().deepCopy(fields()[0].schema(), other.tableauPiles);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.foundationPiles)) {
        this.foundationPiles = data().deepCopy(fields()[1].schema(), other.foundationPiles);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.handPile)) {
        this.handPile = data().deepCopy(fields()[2].schema(), other.handPile);
        fieldSetFlags()[2] = true;
      }
      this.handPileBuilder = null;
      if (isValidValue(fields()[3], other.wastePile)) {
        this.wastePile = data().deepCopy(fields()[3].schema(), other.wastePile);
        fieldSetFlags()[3] = true;
      }
      this.wastePileBuilder = null;
    }

    /**
      * Gets the value of the 'tableauPiles' field.
      * @return The value.
      */
    public java.util.List<serialization.compare.avro.Pile> getTableauPiles() {
      return tableauPiles;
    }


    /**
      * Sets the value of the 'tableauPiles' field.
      * @param value The value of 'tableauPiles'.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder setTableauPiles(java.util.List<serialization.compare.avro.Pile> value) {
      validate(fields()[0], value);
      this.tableauPiles = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tableauPiles' field has been set.
      * @return True if the 'tableauPiles' field has been set, false otherwise.
      */
    public boolean hasTableauPiles() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tableauPiles' field.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder clearTableauPiles() {
      tableauPiles = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'foundationPiles' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> getFoundationPiles() {
      return foundationPiles;
    }


    /**
      * Sets the value of the 'foundationPiles' field.
      * @param value The value of 'foundationPiles'.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder setFoundationPiles(java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> value) {
      validate(fields()[1], value);
      this.foundationPiles = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'foundationPiles' field has been set.
      * @return True if the 'foundationPiles' field has been set, false otherwise.
      */
    public boolean hasFoundationPiles() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'foundationPiles' field.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder clearFoundationPiles() {
      foundationPiles = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'handPile' field.
      * @return The value.
      */
    public serialization.compare.avro.Pile getHandPile() {
      return handPile;
    }


    /**
      * Sets the value of the 'handPile' field.
      * @param value The value of 'handPile'.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder setHandPile(serialization.compare.avro.Pile value) {
      validate(fields()[2], value);
      this.handPileBuilder = null;
      this.handPile = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'handPile' field has been set.
      * @return True if the 'handPile' field has been set, false otherwise.
      */
    public boolean hasHandPile() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'handPile' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public serialization.compare.avro.Pile.Builder getHandPileBuilder() {
      if (handPileBuilder == null) {
        if (hasHandPile()) {
          setHandPileBuilder(serialization.compare.avro.Pile.newBuilder(handPile));
        } else {
          setHandPileBuilder(serialization.compare.avro.Pile.newBuilder());
        }
      }
      return handPileBuilder;
    }

    /**
     * Sets the Builder instance for the 'handPile' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public serialization.compare.avro.Solitaire.Builder setHandPileBuilder(serialization.compare.avro.Pile.Builder value) {
      clearHandPile();
      handPileBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'handPile' field has an active Builder instance
     * @return True if the 'handPile' field has an active Builder instance
     */
    public boolean hasHandPileBuilder() {
      return handPileBuilder != null;
    }

    /**
      * Clears the value of the 'handPile' field.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder clearHandPile() {
      handPile = null;
      handPileBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'wastePile' field.
      * @return The value.
      */
    public serialization.compare.avro.Pile getWastePile() {
      return wastePile;
    }


    /**
      * Sets the value of the 'wastePile' field.
      * @param value The value of 'wastePile'.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder setWastePile(serialization.compare.avro.Pile value) {
      validate(fields()[3], value);
      this.wastePileBuilder = null;
      this.wastePile = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'wastePile' field has been set.
      * @return True if the 'wastePile' field has been set, false otherwise.
      */
    public boolean hasWastePile() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'wastePile' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public serialization.compare.avro.Pile.Builder getWastePileBuilder() {
      if (wastePileBuilder == null) {
        if (hasWastePile()) {
          setWastePileBuilder(serialization.compare.avro.Pile.newBuilder(wastePile));
        } else {
          setWastePileBuilder(serialization.compare.avro.Pile.newBuilder());
        }
      }
      return wastePileBuilder;
    }

    /**
     * Sets the Builder instance for the 'wastePile' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public serialization.compare.avro.Solitaire.Builder setWastePileBuilder(serialization.compare.avro.Pile.Builder value) {
      clearWastePile();
      wastePileBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'wastePile' field has an active Builder instance
     * @return True if the 'wastePile' field has an active Builder instance
     */
    public boolean hasWastePileBuilder() {
      return wastePileBuilder != null;
    }

    /**
      * Clears the value of the 'wastePile' field.
      * @return This builder.
      */
    public serialization.compare.avro.Solitaire.Builder clearWastePile() {
      wastePile = null;
      wastePileBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Solitaire build() {
      try {
        Solitaire record = new Solitaire();
        record.tableauPiles = fieldSetFlags()[0] ? this.tableauPiles : (java.util.List<serialization.compare.avro.Pile>) defaultValue(fields()[0]);
        record.foundationPiles = fieldSetFlags()[1] ? this.foundationPiles : (java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile>) defaultValue(fields()[1]);
        if (handPileBuilder != null) {
          try {
            record.handPile = this.handPileBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("handPile"));
            throw e;
          }
        } else {
          record.handPile = fieldSetFlags()[2] ? this.handPile : (serialization.compare.avro.Pile) defaultValue(fields()[2]);
        }
        if (wastePileBuilder != null) {
          try {
            record.wastePile = this.wastePileBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("wastePile"));
            throw e;
          }
        } else {
          record.wastePile = fieldSetFlags()[3] ? this.wastePile : (serialization.compare.avro.Pile) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Solitaire>
    WRITER$ = (org.apache.avro.io.DatumWriter<Solitaire>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Solitaire>
    READER$ = (org.apache.avro.io.DatumReader<Solitaire>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.tableauPiles.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (serialization.compare.avro.Pile e0: this.tableauPiles) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.foundationPiles.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, serialization.compare.avro.Pile> e1: this.foundationPiles.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      serialization.compare.avro.Pile v1 = e1.getValue();
      v1.customEncode(out);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    this.handPile.customEncode(out);

    this.wastePile.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<serialization.compare.avro.Pile> a0 = this.tableauPiles;
      if (a0 == null) {
        a0 = new SpecificData.Array<serialization.compare.avro.Pile>((int)size0, SCHEMA$.getField("tableauPiles").schema());
        this.tableauPiles = a0;
      } else a0.clear();
      SpecificData.Array<serialization.compare.avro.Pile> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<serialization.compare.avro.Pile>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          serialization.compare.avro.Pile e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new serialization.compare.avro.Pile();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> m1 = this.foundationPiles; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,serialization.compare.avro.Pile>((int)size1);
        this.foundationPiles = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          serialization.compare.avro.Pile v1 = null;
          if (v1 == null) {
            v1 = new serialization.compare.avro.Pile();
          }
          v1.customDecode(in);
          m1.put(k1, v1);
        }
      }

      if (this.handPile == null) {
        this.handPile = new serialization.compare.avro.Pile();
      }
      this.handPile.customDecode(in);

      if (this.wastePile == null) {
        this.wastePile = new serialization.compare.avro.Pile();
      }
      this.wastePile.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<serialization.compare.avro.Pile> a0 = this.tableauPiles;
          if (a0 == null) {
            a0 = new SpecificData.Array<serialization.compare.avro.Pile>((int)size0, SCHEMA$.getField("tableauPiles").schema());
            this.tableauPiles = a0;
          } else a0.clear();
          SpecificData.Array<serialization.compare.avro.Pile> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<serialization.compare.avro.Pile>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              serialization.compare.avro.Pile e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new serialization.compare.avro.Pile();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,serialization.compare.avro.Pile> m1 = this.foundationPiles; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,serialization.compare.avro.Pile>((int)size1);
            this.foundationPiles = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              serialization.compare.avro.Pile v1 = null;
              if (v1 == null) {
                v1 = new serialization.compare.avro.Pile();
              }
              v1.customDecode(in);
              m1.put(k1, v1);
            }
          }
          break;

        case 2:
          if (this.handPile == null) {
            this.handPile = new serialization.compare.avro.Pile();
          }
          this.handPile.customDecode(in);
          break;

        case 3:
          if (this.wastePile == null) {
            this.wastePile = new serialization.compare.avro.Pile();
          }
          this.wastePile.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










